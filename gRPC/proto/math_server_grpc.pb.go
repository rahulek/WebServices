// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.2
// source: proto/math_server.proto

package math_server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MathServiceClient is the client API for MathService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MathServiceClient interface {
	// Simple RPC
	Add(ctx context.Context, in *TwoInts, opts ...grpc.CallOption) (*Result, error)
	Multiply(ctx context.Context, in *TwoInts, opts ...grpc.CallOption) (*Result, error)
	// Client -> Server Stream
	AddN(ctx context.Context, opts ...grpc.CallOption) (MathService_AddNClient, error)
	MultiplyN(ctx context.Context, opts ...grpc.CallOption) (MathService_MultiplyNClient, error)
	// Server -> Client Stream
	GetCapabilties(ctx context.Context, in *Dummy, opts ...grpc.CallOption) (MathService_GetCapabiltiesClient, error)
	// Client -> Server Bidirectional Stream
	Transform(ctx context.Context, opts ...grpc.CallOption) (MathService_TransformClient, error)
}

type mathServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMathServiceClient(cc grpc.ClientConnInterface) MathServiceClient {
	return &mathServiceClient{cc}
}

func (c *mathServiceClient) Add(ctx context.Context, in *TwoInts, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/math_server.MathService/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mathServiceClient) Multiply(ctx context.Context, in *TwoInts, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/math_server.MathService/Multiply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mathServiceClient) AddN(ctx context.Context, opts ...grpc.CallOption) (MathService_AddNClient, error) {
	stream, err := c.cc.NewStream(ctx, &MathService_ServiceDesc.Streams[0], "/math_server.MathService/AddN", opts...)
	if err != nil {
		return nil, err
	}
	x := &mathServiceAddNClient{stream}
	return x, nil
}

type MathService_AddNClient interface {
	Send(*IntInput) error
	CloseAndRecv() (*Result, error)
	grpc.ClientStream
}

type mathServiceAddNClient struct {
	grpc.ClientStream
}

func (x *mathServiceAddNClient) Send(m *IntInput) error {
	return x.ClientStream.SendMsg(m)
}

func (x *mathServiceAddNClient) CloseAndRecv() (*Result, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Result)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mathServiceClient) MultiplyN(ctx context.Context, opts ...grpc.CallOption) (MathService_MultiplyNClient, error) {
	stream, err := c.cc.NewStream(ctx, &MathService_ServiceDesc.Streams[1], "/math_server.MathService/MultiplyN", opts...)
	if err != nil {
		return nil, err
	}
	x := &mathServiceMultiplyNClient{stream}
	return x, nil
}

type MathService_MultiplyNClient interface {
	Send(*IntInput) error
	CloseAndRecv() (*Result, error)
	grpc.ClientStream
}

type mathServiceMultiplyNClient struct {
	grpc.ClientStream
}

func (x *mathServiceMultiplyNClient) Send(m *IntInput) error {
	return x.ClientStream.SendMsg(m)
}

func (x *mathServiceMultiplyNClient) CloseAndRecv() (*Result, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Result)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mathServiceClient) GetCapabilties(ctx context.Context, in *Dummy, opts ...grpc.CallOption) (MathService_GetCapabiltiesClient, error) {
	stream, err := c.cc.NewStream(ctx, &MathService_ServiceDesc.Streams[2], "/math_server.MathService/GetCapabilties", opts...)
	if err != nil {
		return nil, err
	}
	x := &mathServiceGetCapabiltiesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MathService_GetCapabiltiesClient interface {
	Recv() (*CapabilitiesResult, error)
	grpc.ClientStream
}

type mathServiceGetCapabiltiesClient struct {
	grpc.ClientStream
}

func (x *mathServiceGetCapabiltiesClient) Recv() (*CapabilitiesResult, error) {
	m := new(CapabilitiesResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mathServiceClient) Transform(ctx context.Context, opts ...grpc.CallOption) (MathService_TransformClient, error) {
	stream, err := c.cc.NewStream(ctx, &MathService_ServiceDesc.Streams[3], "/math_server.MathService/Transform", opts...)
	if err != nil {
		return nil, err
	}
	x := &mathServiceTransformClient{stream}
	return x, nil
}

type MathService_TransformClient interface {
	Send(*IntInput) error
	Recv() (*TransformationResult, error)
	grpc.ClientStream
}

type mathServiceTransformClient struct {
	grpc.ClientStream
}

func (x *mathServiceTransformClient) Send(m *IntInput) error {
	return x.ClientStream.SendMsg(m)
}

func (x *mathServiceTransformClient) Recv() (*TransformationResult, error) {
	m := new(TransformationResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MathServiceServer is the server API for MathService service.
// All implementations must embed UnimplementedMathServiceServer
// for forward compatibility
type MathServiceServer interface {
	// Simple RPC
	Add(context.Context, *TwoInts) (*Result, error)
	Multiply(context.Context, *TwoInts) (*Result, error)
	// Client -> Server Stream
	AddN(MathService_AddNServer) error
	MultiplyN(MathService_MultiplyNServer) error
	// Server -> Client Stream
	GetCapabilties(*Dummy, MathService_GetCapabiltiesServer) error
	// Client -> Server Bidirectional Stream
	Transform(MathService_TransformServer) error
	mustEmbedUnimplementedMathServiceServer()
}

// UnimplementedMathServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMathServiceServer struct {
}

func (UnimplementedMathServiceServer) Add(context.Context, *TwoInts) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedMathServiceServer) Multiply(context.Context, *TwoInts) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Multiply not implemented")
}
func (UnimplementedMathServiceServer) AddN(MathService_AddNServer) error {
	return status.Errorf(codes.Unimplemented, "method AddN not implemented")
}
func (UnimplementedMathServiceServer) MultiplyN(MathService_MultiplyNServer) error {
	return status.Errorf(codes.Unimplemented, "method MultiplyN not implemented")
}
func (UnimplementedMathServiceServer) GetCapabilties(*Dummy, MathService_GetCapabiltiesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetCapabilties not implemented")
}
func (UnimplementedMathServiceServer) Transform(MathService_TransformServer) error {
	return status.Errorf(codes.Unimplemented, "method Transform not implemented")
}
func (UnimplementedMathServiceServer) mustEmbedUnimplementedMathServiceServer() {}

// UnsafeMathServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MathServiceServer will
// result in compilation errors.
type UnsafeMathServiceServer interface {
	mustEmbedUnimplementedMathServiceServer()
}

func RegisterMathServiceServer(s grpc.ServiceRegistrar, srv MathServiceServer) {
	s.RegisterService(&MathService_ServiceDesc, srv)
}

func _MathService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TwoInts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MathServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/math_server.MathService/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MathServiceServer).Add(ctx, req.(*TwoInts))
	}
	return interceptor(ctx, in, info, handler)
}

func _MathService_Multiply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TwoInts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MathServiceServer).Multiply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/math_server.MathService/Multiply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MathServiceServer).Multiply(ctx, req.(*TwoInts))
	}
	return interceptor(ctx, in, info, handler)
}

func _MathService_AddN_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MathServiceServer).AddN(&mathServiceAddNServer{stream})
}

type MathService_AddNServer interface {
	SendAndClose(*Result) error
	Recv() (*IntInput, error)
	grpc.ServerStream
}

type mathServiceAddNServer struct {
	grpc.ServerStream
}

func (x *mathServiceAddNServer) SendAndClose(m *Result) error {
	return x.ServerStream.SendMsg(m)
}

func (x *mathServiceAddNServer) Recv() (*IntInput, error) {
	m := new(IntInput)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MathService_MultiplyN_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MathServiceServer).MultiplyN(&mathServiceMultiplyNServer{stream})
}

type MathService_MultiplyNServer interface {
	SendAndClose(*Result) error
	Recv() (*IntInput, error)
	grpc.ServerStream
}

type mathServiceMultiplyNServer struct {
	grpc.ServerStream
}

func (x *mathServiceMultiplyNServer) SendAndClose(m *Result) error {
	return x.ServerStream.SendMsg(m)
}

func (x *mathServiceMultiplyNServer) Recv() (*IntInput, error) {
	m := new(IntInput)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MathService_GetCapabilties_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Dummy)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MathServiceServer).GetCapabilties(m, &mathServiceGetCapabiltiesServer{stream})
}

type MathService_GetCapabiltiesServer interface {
	Send(*CapabilitiesResult) error
	grpc.ServerStream
}

type mathServiceGetCapabiltiesServer struct {
	grpc.ServerStream
}

func (x *mathServiceGetCapabiltiesServer) Send(m *CapabilitiesResult) error {
	return x.ServerStream.SendMsg(m)
}

func _MathService_Transform_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MathServiceServer).Transform(&mathServiceTransformServer{stream})
}

type MathService_TransformServer interface {
	Send(*TransformationResult) error
	Recv() (*IntInput, error)
	grpc.ServerStream
}

type mathServiceTransformServer struct {
	grpc.ServerStream
}

func (x *mathServiceTransformServer) Send(m *TransformationResult) error {
	return x.ServerStream.SendMsg(m)
}

func (x *mathServiceTransformServer) Recv() (*IntInput, error) {
	m := new(IntInput)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MathService_ServiceDesc is the grpc.ServiceDesc for MathService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MathService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "math_server.MathService",
	HandlerType: (*MathServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _MathService_Add_Handler,
		},
		{
			MethodName: "Multiply",
			Handler:    _MathService_Multiply_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AddN",
			Handler:       _MathService_AddN_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "MultiplyN",
			Handler:       _MathService_MultiplyN_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetCapabilties",
			Handler:       _MathService_GetCapabilties_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Transform",
			Handler:       _MathService_Transform_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/math_server.proto",
}
